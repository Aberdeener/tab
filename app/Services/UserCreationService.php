<?php

namespace App\Services;

use App\Helpers\RoleHelper;
use App\Models\User;
use App\Models\UserLimits;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class UserCreationService extends Service
{
    public const RESULT_NEGATIVE_LIMIT = 0;
    public const RESULT_SUCCESS = 1;

    public function __construct(
        private Request $_request
    )
    {
        $user = new User();
        $user->full_name = $this->_request->full_name;
        if (empty($this->_request->username)) {
            $user->username = strtolower(str_replace(' ', '', $this->_request->full_name));
        } else {
            $user->username = $this->_request->username;
        }

        // TODO: Edge case: Their full name was unique, they did not enter a custom username, but the autogenerated username above is not unique
        // Possible Cause: "Tad hgBoyle" as full name instead of "Tadhg Boyle" -> would make "tadhgboyle" as username, which might already exist
        // Three options:
        // 1. Leave as is. Slightly slower as we need another query, but it works
        // 2. Instead of replacing whitespace with "" when making the username, replace it with "_"
        // 3. Always add a random number to the end of all autogenerated usernames
        if (User::where('username', $user->username)->count() > 0) {
            $user->username = $user->username . mt_rand(0, 100);
        }

        $balance = 0;
        if (!empty($this->_request->balance)) {
            $balance = $this->_request->balance;
        }

        $user->balance = $balance;
        $user->role_id = $this->_request->role_id;

        if (in_array($this->_request->role_id, array_column(RoleHelper::getInstance()->getStaffRoles(), 'name'))) {
            $user->password = bcrypt($this->_request->password);
        }

        $user->save();

        // Update their category limits
        foreach ($this->_request->limit as $category_id => $limit) {
            $duration = 0;
            // Default to limit per day rather than week if not specified
            empty($this->_request->duration[$category_id]) ? $duration = 0 : $duration = $this->_request->duration[$category_id];
            // Default to unlimited limit if not specified
            if (empty($limit)) {
                $limit = -1;
            } else {
                if ($limit < -1) {
                    $this->_message = 'Limit must be -1 or above for ' . Category::find($category_id)->name . '. (-1 means no limit)';
                    $this->_result = self::RESULT_NEGATIVE_LIMIT;
                    return;
                }
            }

            UserLimits::updateOrCreate(
                ['user_id' => $user->id, 'category_id' => $category_id],
                ['limit_per' => $limit, 'duration' => $duration, 'editor_id' => auth()->id()]
            );
        }

        $this->_result = self::RESULT_SUCCESS;
        $this->_message = 'Created user ' . $this->_request->full_name . '.';
    }

    public function redirect(): RedirectResponse
    {
        switch ($this->getResult()) {
            case self::RESULT_SUCCESS:
                return redirect()->route('users_list')->with('success', $this->getMessage());
            default:
                return redirect()->back()->withInput()->with('error', $this->getMessage());
        }
    }
}