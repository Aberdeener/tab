<?php

namespace App\Services\Users;

use App\Models\User;
use App\Services\HttpService;
use App\Helpers\RoleHelper;
use App\Http\Requests\UserRequest;
use Illuminate\Http\RedirectResponse;
use App\Services\Users\UserLimits\UserLimitUpsertService;

class UserCreateService extends HttpService
{
    use UserService;

    public const RESULT_SUCCESS = 'SUCCESS';

    public function __construct(UserRequest $request)
    {
        $user = new User();
        $user->full_name = $request->full_name;
        $user->username = $request->username ?: strtolower(str_replace(' ', '', $request->full_name));

        // TODO: Edge case: Their full name was unique, they did not enter a custom username, but the autogenerated username above is not unique
        // Possible Cause: "Tad hgBoyle" as full name instead of "Tadhg Boyle" -> would make "tadhgboyle" as username, which might already exist
        // Three options:
        // 1. Leave as is. Slightly slower as we need another query, but it works
        // 2. Instead of replacing whitespace with "" when making the username, replace it with "_"
        // 3. Always add a random number to the end of all autogenerated usernames

        if (User::query()->where('username', $user->username)->count() > 0) {
            $user->username .= random_int(0, 100);
        }

        $user->balance = $request->balance ?: 0;
        $user->role_id = $request->role_id;

        if (resolve(RoleHelper::class)->isStaffRole($request->role_id)) {
            $user->password = bcrypt($request->password);
        }

        $user->save();
        $this->_user = $user;

        // has to be after save() so they have an id
        foreach ($request->rotations as $rotation_id) {
            $user->rotations()->attach($rotation_id);
        }

        // Set their category limits
        $userLimitsUpsertService = new UserLimitUpsertService($user, $request);
        // TODO make this a transaction so we can rollback if one of the limits fails
        if (!in_array($userLimitsUpsertService->getResult(), [UserLimitUpsertService::RESULT_SUCCESS, UserLimitUpsertService::RESULT_SUCCESS_NULL_DATA])) {
            $this->_result = $userLimitsUpsertService->getResult();
            $this->_message = $userLimitsUpsertService->getMessage();
            return;
        }

        $this->_result = self::RESULT_SUCCESS;
        $this->_message = "Created user {$user->full_name}";
        $this->_user = $user;
    }

    public function redirect(): RedirectResponse
    {
        return match ($this->getResult()) {
            self::RESULT_SUCCESS => redirect()->route('users_list')->with('success', $this->getMessage()),
            default => redirect()->back()->with('error', $this->getMessage()),
        };
    }
}
